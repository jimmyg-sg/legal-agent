{"createdAt":"2025-07-28T22:38:03.730Z","updatedAt":"2025-08-19T22:18:10.685Z","id":"b3uS2W5fAiAfsHWx","name":"LG_SIGNATURE_DOCUMENT_CITATION","active":false,"isArchived":false,"nodes":[{"parameters":{"url":"=https://graph.microsoft.com/v1.0/sites/softwareestrategico.sharepoint.com,ab0aee8d-22e9-4218-a1f1-30b870c1060c,e2b2e7d8-29a6-46cb-9608-8e6359975805/drive/root:/PDF_Teams_IA/{{$now.format('yyyy')}}/{{ new Date().toLocaleString('es-ES', { month: 'long' }) }}/{{ $items('Create Folder Name')[0].json.base_name }}/{{ $items('Map SharePoint Data')[0].json.nombre_archivo }}:/content\n","authentication":"genericCredentialType","genericAuthType":"oAuth2Api","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Accept","value":"application/json"}]},"options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2144,368],"id":"75565852-5985-40ad-bc3b-ff1137b99821","name":"Get Citation Document","credentials":{"oAuth2Api":{"id":"bFIWrkN2SNqk0s7T","name":"SharePoint Credential"}}},{"parameters":{"method":"PUT","url":"=https://graph.microsoft.com/v1.0/sites/softwareestrategico.sharepoint.com,ab0aee8d-22e9-4218-a1f1-30b870c1060c,e2b2e7d8-29a6-46cb-9608-8e6359975805/drive/root:/PDF_Teams_IA/{{ $json.año }}/{{ $json.mes }}/{{ $items('Create Folder Name')[0].json.base_name }}/{{ $json.nombre_archivo_pdf }}:/content","authentication":"genericCredentialType","genericAuthType":"oAuth2Api","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/pdf"}]},"sendBody":true,"contentType":"binaryData","inputDataFieldName":"data","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-672,688],"id":"af639af5-1a54-4a19-9c56-f12787af4a6e","name":"Upload PDF To SharePoint","credentials":{"oAuth2Api":{"id":"bFIWrkN2SNqk0s7T","name":"SharePoint Credential"}}},{"parameters":{"jsCode":"// Obtener el output del comando anterior\nconst output = $input.first().json.stdout;\nconst lines = output.split('\\n');\n\n// Verificar que el archivo existe\nif (!lines[0].includes('ARCHIVO_EXISTE')) {\n    throw new Error('El archivo PDF no existe');\n}\n\n// El base64 empieza después de la línea con la información del archivo\n// Buscar donde termina la información del archivo y empieza el base64\nconst base64StartIndex = lines.findIndex(line => line.includes('.pdf')) + 1;\nconst base64Content = lines.slice(base64StartIndex).join('');\n\n// Obtener información del nodo anterior\nconst datosAnteriores = $('Extract Document Results').item.json;\n\n// Crear el objeto binario para n8n\nconst binaryData = {\n    data: base64Content,\n    mimeType: 'application/pdf',\n    fileName: datosAnteriores.nombre_archivo_pdf\n};\n\nreturn [{\n    json: datosAnteriores,\n    binary: {\n        data: binaryData\n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-944,688],"id":"f4a7f68d-0cf5-47f4-80c4-7d624025ae6d","name":"Convert PDF Base64"},{"parameters":{"operation":"executeQuery","query":"select u.full_name nombre_empleado, \nfap.url_directorio,\nu.solvo_id\nfrom public.fact_apertura_proceso fap \ninner join public.users u on u.id = fap.id_empleado \ninner join public.callsattentionusers cau on cau.id = fap.call_attention_id\ninner join public.fact_citacion_proceso fcp on fcp.fk_id_apertura_proceso = fap.id \nwhere fcp.fk_id_apertura_proceso = {{ $json.id_proceso }}\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[-3328,368],"id":"2e086274-6cec-4ba8-9ff4-0fd2ee62c16a","name":"Get Process Data","alwaysOutputData":true,"credentials":{"postgres":{"id":"t7K7eyjUsIfXd8J7","name":"Postgres account"}}},{"parameters":{"operation":"write","fileName":"={{ $('Path Tmp Folder').item.json.path }}/{{ $('Map SharePoint Data').item.json.nombre_archivo }}","options":{}},"type":"n8n-nodes-base.readWriteFile","typeVersion":1,"position":[-1888,368],"id":"8ee790bb-27d3-4280-8957-a3de856afc65","name":"Save Document Locally"},{"parameters":{"jsCode":"const fecha = new Date();\nconst meses = [\"enero\",\"febrero\",\"marzo\",\"abril\",\"mayo\",\"junio\",\n              \"julio\",\"agosto\",\"septiembre\",\"octubre\",\"noviembre\",\"diciembre\"];\n\n// Los datos vienen del nodo anterior\nconst archivoGuardado = $input.first().json;\nconst nombreArchivo = archivoGuardado.fileName.split('/').pop(); // Extrae solo el nombre\nconst match = nombreArchivo.match(/(.+)\\_PRIMERA_CITACION.docx/);\nconst solvoId = match ? match[1] : nombreArchivo.match(/([A-Z]+\\d+)/)[0];\n\nreturn [{\n  json: {\n    solvo_id: solvoId,\n    nombre_archivo: nombreArchivo,\n    ruta_local: archivoGuardado.fileName,\n    ruta_firma: `tmp/legal_agent/signature/Firma_relaciones_laborales.PNG`,\n    año: fecha.getFullYear().toString(),\n    mes: meses[fecha.getMonth()],\n    nombre_pdf: `${solvoId}_PRIMERA_CITACION.pdf`,\n    nombre_word_firmado: `${solvoId}_PRIMERA_CITACION_firmado.docx`,\n    ruta_local_firmado: `tmp/legal_agent/temporary/${nombreArchivo.replace('.docx', '_firmado.docx')}`,\n    ruta_local_pdf: `tmp/legal_agent/temporary/${nombreArchivo.replace('.docx', '_firmado.pdf')}`\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1696,368],"id":"978dd5f0-fb97-4905-a8fc-09615fc14bba","name":"Build Document Paths"},{"parameters":{"command":"=if [ -f \"{{ $('Build Document Paths').first().json.ruta_firma }}\" ]; then\n    echo \"FIRMA_EXISTE\"\nelse\n    echo \"FIRMA_NO_EXISTE\" \nfi\n"},"type":"n8n-nodes-base.executeCommand","typeVersion":1,"position":[-1488,368],"id":"92560146-84c5-47f2-a79a-69b8d77aa2ac","name":"Validate Signature Exists"},{"parameters":{"url":"https://graph.microsoft.com/v1.0/sites/softwareestrategico.sharepoint.com,ab0aee8d-22e9-4218-a1f1-30b870c1060c,e2b2e7d8-29a6-46cb-9608-8e6359975805/drive/root:/Firmas_Digitales/Firma_relaciones_laborales.PNG:/content","authentication":"genericCredentialType","genericAuthType":"oAuth2Api","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Accept","value":"application/octet-stream"}]},"options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-128,256],"id":"6e981510-dd39-4f47-938d-0a984b495a80","name":"Get Signature From SharePoint","credentials":{"oAuth2Api":{"id":"bFIWrkN2SNqk0s7T","name":"SharePoint Credential"}}},{"parameters":{"operation":"write","fileName":"={{ $('Path Tmp Folder').item.json.pathSignature }}/Firma_relaciones_laborales.PNG","options":{"append":false}},"type":"n8n-nodes-base.readWriteFile","typeVersion":1,"position":[128,368],"id":"4c762076-89f7-47e5-8ea1-5614e9ab0152","name":"Save Signature Locally"},{"parameters":{"command":"=cat << 'EOF' > tmp/legal_agent/scripts/insertar_firma.py\nfrom docxtpl import DocxTemplate, InlineImage\nfrom docx import Document\nfrom docx.shared import Inches, Pt\nfrom docx.enum.text import WD_ALIGN_PARAGRAPH\nimport os\nimport subprocess\nimport sys\nimport json\nimport time\n\ndef insertar_firma_documento(ruta_documento, ruta_firma, solvo_id):\n    try:\n        print(f\"Cargando documento: {ruta_documento}\")\n        \n        # Cargar como documento Word normal\n        doc = Document(ruta_documento)\n        \n        # Verificar que existe la firma\n        if not os.path.exists(ruta_firma):\n            return {\"error\": f\"No se encontró la imagen de firma en: {ruta_firma}\"}\n        \n        print(f\"Cargando firma desde: {ruta_firma}\")\n        \n        # Buscar el texto \"EMPLOYER\" y \"LABOR RELATIONS SOLVO S.A.S\"\n        encontrado = False\n        for i, paragraph in enumerate(doc.paragraphs):\n            if \"EMPLOYER\" in paragraph.text:\n                # Verificar si el siguiente párrafo contiene \"LABOR RELATIONS SOLVO S.A.S\"\n                if i + 1 < len(doc.paragraphs) and \"LABOR RELATIONS SOLVO S.A.S\" in doc.paragraphs[i + 1].text:\n                    print(f\"Encontrado texto objetivo en párrafo {i}\")\n                    \n                    # Insertar un nuevo párrafo antes de \"EMPLOYER\"\n                    new_paragraph = paragraph.insert_paragraph_before()\n                    new_paragraph.alignment = WD_ALIGN_PARAGRAPH.LEFT\n                    \n                    # Agregar la imagen de firma\n                    run = new_paragraph.add_run()\n                    run.add_picture(ruta_firma, width=Inches(1.5))\n                    \n                    # Agregar un espacio después de la imagen\n                    new_paragraph.add_run(\"\\n\")\n                    \n                    encontrado = True\n                    break\n        \n        # Definir rutas de salida\n        directorio = os.path.dirname(ruta_documento)\n        ruta_firmado = os.path.join(directorio, f\"{solvo_id}_PRIMERA_CITACION_firmado.docx\")\n        pdf_path_final = os.path.join(directorio, f\"{solvo_id}_PRIMERA_CITACION.pdf\")\n        \n        if not encontrado:\n            # Método alternativo: buscar con docxtpl si hay marcadores\n            try:\n                tpl = DocxTemplate(ruta_documento)\n                variables = tpl.get_undeclared_template_variables()\n                if 'firma' in variables:\n                    print(\"Encontrado marcador 'firma', usando docxtpl\")\n                    firma_img = InlineImage(tpl, ruta_firma, width=Inches(1.5))\n                    context = {\"firma\": [firma_img]}\n                    tpl.render(context)\n                    tpl.save(ruta_firmado)\n                else:\n                    print(\"No se encontró marcador ni texto objetivo\")\n                    doc.save(ruta_firmado)\n            except Exception as e:\n                print(f\"Error con docxtpl: {e}\")\n                doc.save(ruta_firmado)\n        else:\n            # Guardar documento firmado\n            doc.save(ruta_firmado)\n        \n        print(f\"Documento firmado guardado en: {ruta_firmado}\")\n        \n        # Verificar que el archivo Word se guardó correctamente\n        if not os.path.exists(ruta_firmado):\n            return {\"error\": f\"No se pudo guardar el archivo Word: {ruta_firmado}\"}\n        \n        print(f\"Archivo Word confirmado: {ruta_firmado} ({os.path.getsize(ruta_firmado)} bytes)\")\n        \n        # Convertir a PDF\n        print(\"Convirtiendo a PDF...\")\n        pdf_generado = False\n        \n        # Método 1: LibreOffice\n        try:\n            print(\"Intentando conversión con LibreOffice...\")\n            resultado = subprocess.run([\n                \"libreoffice\", \"--headless\", \"--convert-to\", \"pdf\", \n                \"--outdir\", directorio, ruta_firmado\n            ], capture_output=True, text=True, timeout=60)\n            \n            print(f\"LibreOffice exit code: {resultado.returncode}\")\n            if resultado.stdout:\n                print(f\"LibreOffice stdout: {resultado.stdout}\")\n            if resultado.stderr:\n                print(f\"LibreOffice stderr: {resultado.stderr}\")\n            \n            # LibreOffice genera el PDF con el mismo nombre base del docx\n            pdf_path_libreoffice = ruta_firmado.replace('.docx', '.pdf')\n            \n            if os.path.exists(pdf_path_libreoffice) and os.path.getsize(pdf_path_libreoffice) > 0:\n                print(f\"PDF generado por LibreOffice: {pdf_path_libreoffice}\")\n                # Renombrar al nombre final si es necesario\n                if pdf_path_libreoffice != pdf_path_final:\n                    os.rename(pdf_path_libreoffice, pdf_path_final)\n                pdf_generado = True\n            \n        except subprocess.TimeoutExpired:\n            print(\"LibreOffice timeout\")\n        except Exception as e:\n            print(f\"Error con LibreOffice: {e}\")\n        \n        # Método 2: unoconv (si LibreOffice falló)\n        if not pdf_generado:\n            try:\n                print(\"Intentando con unoconv...\")\n                resultado = subprocess.run([\n                    \"unoconv\", \"-f\", \"pdf\", \"-o\", pdf_path_final, ruta_firmado\n                ], capture_output=True, text=True, timeout=60)\n                \n                print(f\"unoconv exit code: {resultado.returncode}\")\n                \n                if os.path.exists(pdf_path_final) and os.path.getsize(pdf_path_final) > 0:\n                    print(\"PDF generado con unoconv\")\n                    pdf_generado = True\n                    \n            except subprocess.TimeoutExpired:\n                print(\"unoconv timeout\")\n            except Exception as e:\n                print(f\"Error con unoconv: {e}\")\n        \n        # Verificar resultado final\n        if pdf_generado and os.path.exists(pdf_path_final) and os.path.getsize(pdf_path_final) > 0:\n            print(f\"PDF generado exitosamente: {pdf_path_final} ({os.path.getsize(pdf_path_final)} bytes)\")\n            return {\n                \"success\": True,\n                \"word_firmado\": ruta_firmado,\n                \"pdf\": pdf_path_final,\n                \"original\": ruta_documento\n            }\n        else:\n            print(\"No se pudo generar PDF, retornando solo Word\")\n            return {\n                \"success\": True,\n                \"word_firmado\": ruta_firmado,\n                \"pdf\": None,\n                \"original\": ruta_documento,\n                \"warning\": \"No se pudo generar PDF, solo se generó el documento Word firmado\"\n            }\n        \n    except Exception as e:\n        import traceback\n        return {\"error\": str(e), \"traceback\": traceback.format_exc()}\n\nif __name__ == \"__main__\":\n    ruta_doc = sys.argv[1]\n    ruta_firma = sys.argv[2]\n    solvo_id = sys.argv[3]\n    \n    resultado = insertar_firma_documento(ruta_doc, ruta_firma, solvo_id)\n    print(json.dumps(resultado))\nEOF\n\necho \"Script creado exitosamente\""},"type":"n8n-nodes-base.executeCommand","typeVersion":1,"position":[416,32],"id":"860b5ef5-e252-4eac-a09c-1ac5cec556ac","name":"Create Signature Script"},{"parameters":{"command":"=python3 tmp/legal_agent/scripts/insertar_firma.py \\\n\"{{ $('Build Document Paths').item.json.ruta_local }}\" \\\n\"{{ $('Build Document Paths').item.json.ruta_firma }}\" \\\n\"{{ $items('Map SharePoint Data')[0].json.solvo_id }}\""},"type":"n8n-nodes-base.executeCommand","typeVersion":1,"position":[672,240],"id":"e6ccc3a8-4a3e-4af7-8e36-f21760535ea8","name":"Execute Signature Insertion"},{"parameters":{"jsCode":"// Obtener el output del comando\nconst output = $input.first().json.stdout;\n\nconsole.log(\"Output completo del comando:\", output);\n\n// Dividir en líneas para análisis\nconst lines = output.split('\\n');\n\nconsole.log(\"Líneas del output:\", lines);\n\n// Buscar el JSON en el output (puede estar en cualquier línea)\nlet resultado = null;\nlet jsonLine = null;\n\n// Intentar encontrar una línea que contenga JSON válido\nfor (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (line.startsWith('{') && line.includes('\"')) {\n        try {\n            resultado = JSON.parse(line);\n            jsonLine = line;\n            console.log(\"JSON encontrado en línea\", i, \":\", line);\n            break;\n        } catch (e) {\n            console.log(\"Error parseando línea\", i, \":\", e.message);\n            continue;\n        }\n    }\n}\n\n// Si no encontramos JSON, buscar líneas que contengan \"success\" o \"error\"\nif (!resultado) {\n    console.log(\"No se encontró JSON válido, buscando líneas con success/error...\");\n    \n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i].trim();\n        if (line.includes('\"success\"') || line.includes('\"error\"')) {\n            try {\n                resultado = JSON.parse(line);\n                jsonLine = line;\n                console.log(\"JSON encontrado con success/error en línea\", i, \":\", line);\n                break;\n            } catch (e) {\n                console.log(\"Error parseando línea con success/error\", i, \":\", e.message);\n                continue;\n            }\n        }\n    }\n}\n\n// Si aún no hay resultado, crear un error informativo\nif (!resultado) {\n    console.log(\"No se pudo encontrar JSON válido en ninguna línea\");\n    console.log(\"Líneas disponibles:\");\n    lines.forEach((line, index) => {\n        console.log(`Línea ${index}: \"${line}\"`);\n    });\n    \n    throw new Error(`No se encontró el resultado JSON válido. Output recibido: ${output.substring(0, 500)}...`);\n}\n\n// Verificar si fue exitoso\nif (!resultado.success) {\n    throw new Error(resultado.error || \"Error al procesar el documento\");\n}\n\n// Combinar con los datos anteriores\nconst datosAnteriores = $('Build Document Paths').item.json;\n\nconsole.log(\"Datos anteriores:\", datosAnteriores);\nconsole.log(\"Resultado del script:\", resultado);\n\nreturn [{\n    json: {\n        ...datosAnteriores,\n        ...resultado,\n        archivo_a_subir: resultado.pdf,\n        nombre_archivo_pdf: datosAnteriores.nombre_pdf\n    }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[816,480],"id":"394b4678-d003-4a20-b88c-135e675f5332","name":"Extract Document Results"},{"parameters":{"command":"=# Verificar que el archivo existe y obtener su información\nif [ -f \"{{ $json.pdf }}\" ]; then\n    echo \"ARCHIVO_EXISTE\"\n    ls -la \"{{ $json.pdf }}\"\n    # Codificar en base64 para poder manejarlo\n    base64 \"{{ $json.pdf }}\"\nelse\n    echo \"ERROR: No se encuentra el archivo PDF\"\nfi"},"type":"n8n-nodes-base.executeCommand","typeVersion":1,"position":[1008,720],"id":"17431ec3-dbd7-49c9-94f2-2a8b9cdf16c5","name":"Verify PDF Generated"},{"parameters":{"command":"=\n\n# Eliminar el Word original descargado\nif [ -f \"{{ $('Extract Document Results').item.json.ruta_local }}\" ]; then\n    rm -f \"{{ $('Extract Document Results').item.json.ruta_local }}\"\n  \nfi\n\n# Eliminar el Word firmado\nif [ -f \"{{ $('Extract Document Results').item.json.word_firmado }}\" ]; then\n    rm -f \"{{ $('Extract Document Results').item.json.word_firmado }}\"\n  \nfi\n\n# Eliminar el PDF generado localmente\nif [ -f \"{{ $('Extract Document Results').item.json.pdf }}\" ]; then\n    rm -f \"{{ $('Extract Document Results').item.json.pdf }}\"\n\nfi\n\n# Eliminar el script Python\nif [ -f \"/tmp/insertar_firma.py\" ]; then\n    rm -f \"/tmp/insertar_firma.py\"\n    \nfi\n\n"},"type":"n8n-nodes-base.executeCommand","typeVersion":1,"position":[-400,688],"id":"f674a17b-1685-452c-bac4-462ab1ec1831","name":"Clean Temporary Files"},{"parameters":{"method":"DELETE","url":"=https://graph.microsoft.com/v1.0/sites/softwareestrategico.sharepoint.com,ab0aee8d-22e9-4218-a1f1-30b870c1060c,e2b2e7d8-29a6-46cb-9608-8e6359975805/drive/root:/PDF_Teams_IA/{{ $('Build Document Paths').item.json.año }}/{{ $('Build Document Paths').item.json.mes }}/{{ $('Create Folder Name').item.json.base_name }}/{{ $('Map SharePoint Data').item.json.nombre_archivo }}","authentication":"genericCredentialType","genericAuthType":"oAuth2Api","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Accept","value":"application/json"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-160,688],"id":"5ecf37ac-5aa5-4d72-b6cc-f83a2147f81f","name":"Delete Original Document","alwaysOutputData":true,"credentials":{"oAuth2Api":{"id":"bFIWrkN2SNqk0s7T","name":"SharePoint Credential"}},"onError":"continueErrorOutput"},{"parameters":{"assignments":{"assignments":[{"id":"a395225f-7f06-4f1e-a846-d47e4cf8e11e","name":"nombre_pdf","value":"={{ $('Convert PDF Base64').item.json.nombre_pdf }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[144,672],"id":"22024a02-6a61-403f-bd6d-41bba3d7f438","name":"Set Final Document Name"},{"parameters":{"amount":3},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-352,160],"id":"0d71ee8d-5456-487a-a972-a276b80321e9","name":"Add Retry Delay","webhookId":"c209134e-c5a3-402e-b646-2cd87485e6d6"},{"parameters":{"keepOnlySet":true,"values":{"string":[{"name":"solvo_id","value":"={{ $('Get Process Data').item.json.solvo_id }}"},{"name":"nombre_archivo","value":"={{ $('Get Process Data').item.json.solvo_id }}_PRIMERA_CITACION.docx"},{"name":"nombre_empleado","value":"={{ $json.nombre_empleado }}"},{"name":"ruta_documento","value":"={{ $json.url_directorio }}/Citacion_Descargos_{{ $('Get Process Data').item.json.solvo_id }}.docx"},{"name":"id_process","value":"={{ $('Call From LG_LAWYER_AGENT').item.json.id_proceso }}"}]},"options":{}},"name":"Map SharePoint Data","type":"n8n-nodes-base.set","typeVersion":1,"position":[-3152,368],"id":"2f73f574-205a-4906-b971-47792ae4ee9f"},{"parameters":{"errorMessage":"={   \"parameters\": {     \"message\": \"Execution stopped:\" {{ $json.parameters.values.string[1].value }}  } }"},"type":"n8n-nodes-base.stopAndError","typeVersion":1,"position":[-352,368],"id":"bf7cf036-524c-4838-b1a7-7b81d163d19d","name":"Stop And Error"},{"parameters":{"inputSource":"passthrough"},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[-3536,368],"id":"9dc162af-ce60-491a-bf9a-04e298754087","name":"Call From LG_LAWYER_AGENT"},{"parameters":{"workflowId":{"__rl":true,"value":"eCrrl5BKZSXULDuc","mode":"list","cachedResultName":"LG_SEND_EMPLOYEE_CITATION_MAIL"},"workflowInputs":{"mappingMode":"defineBelow","value":{"id_proceso":"={{ $('Call From LG_LAWYER_AGENT').first().json.id_proceso }}","name_file":"={{ $json.nombre_pdf }}"},"matchingColumns":[],"schema":[{"id":"id_proceso","displayName":"id_proceso","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"number"},{"id":"name_file","displayName":"name_file","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":true,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[400,672],"id":"64895a21-5177-43ab-88f5-aa4123f163e3","name":"Call LG_SEND_EMPLOYEE_CITATION_MAIL"},{"parameters":{"mode":"raw","jsonOutput":"{\n  \"values\": {\n    \"number\": [\n      {\n        \"name\": \"retry_count\",\n        \"value\": 0\n      },\n      {\n        \"name\": \"max_retries\", \n        \"value\": 5\n      }\n    ]\n  }\n}","options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-1296,192],"id":"d48e67b8-79b1-45d5-8c4a-dfd28a5ca991","name":"Set Retry Variable"},{"parameters":{"mode":"raw","jsonOutput":"={\n  \"name\": \"Increment Retry Counter\",\n  \"type\": \"n8n-nodes-base.set\",\n  \"parameters\": {\n    \"keepOnlySet\": false,\n    \"values\": {\n      \"number\": [\n        {\n          \"name\": \"retry_count\",\n          \"value\": \"={{ $json.retry_count + 1 }}\"\n        }\n      ],\n      \"string\": [\n        {\n          \"name\": \"attempt_info\",\n          \"value\": \"Retry attempt {{ $json.retry_count + 1 }} of {{ $('Set Retry Variable').item.json.values.number[1].value }}\"\n        }\n      ]\n    }\n  }\n}","options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-560,112],"id":"9031c0a0-3228-472f-95d7-afcfe5911d35","name":"Set Increment Retry Counter"},{"parameters":{"mode":"raw","jsonOutput":"={\n  \"parameters\": {\n    \"values\": {\n      \"string\": [\n        {\n          \"name\": \"error_type\",\n          \"value\": \"MAX_RETRY_EXCEEDED\"\n        },\n        {\n          \"name\": \"error_message\",\n          \"value\": \"Failed to download signature after {{ $json.max_retries }} attempts for process {{ $json.solvo_id }}\"\n        },\n        {\n          \"name\": \"timestamp\",\n          \"value\": \"{{ new Date().toISOString() }}\"\n        }\n      ],\n      \"boolean\": [\n        {\n          \"name\": \"execution_failed\",\n          \"value\": true\n        }\n      ]\n    }\n  }\n}","options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-592,368],"id":"141849f1-7a28-4ed8-8c21-c76c9bc6b79d","name":"Set Max Retries Error"},{"parameters":{"jsCode":"return {\n  path: `tmp/legal_agent/temporary`,\n  pathSignature: `tmp/legal_agent/signature`\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2752,368],"id":"b091291a-49a3-4d7a-9b93-4a1cbb472d09","name":"Path Tmp Folder"},{"parameters":{"command":"=mkdir -p {{ $('Path Tmp Folder').item.json.path }} && chmod 777 {{ $('Path Tmp Folder').item.json.path }}"},"type":"n8n-nodes-base.executeCommand","typeVersion":1,"position":[-2560,368],"id":"5c423c52-15a2-4d89-a26f-c2c8705672e4","name":"Create Evidence Folder"},{"parameters":{"command":"=mkdir -p {{ $('Path Tmp Folder').item.json.pathSignature }} && chmod 777 {{ $('Path Tmp Folder').item.json.pathSignature }}\n"},"type":"n8n-nodes-base.executeCommand","typeVersion":1,"position":[-2368,368],"id":"a40ece18-c8e0-4aa7-a442-c606af318b07","name":"Create Evidence Folder1"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('Validate Signature Exists').item.json.stdout }}","rightValue":"FIRMA_EXISTE","operator":{"type":"string","operation":"contains"},"id":"76944609-3c1a-4bdf-9f9b-149658c5a41b"}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"37342013-bcb8-4c26-934e-7404980b9182","leftValue":"={{ $json.values.number[0].value || 0 }}","rightValue":"={{ $json.values.number[1].value }}","operator":{"type":"number","operation":"lt"}}],"combinator":"and"}},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"a6f18110-830c-4583-bcde-d342cb0a05e4","leftValue":"={{ $json.values.number[0].value || 0 }}","rightValue":"={{ $json.values.number[1].value || 5 }}","operator":{"type":"number","operation":"gte"}}],"combinator":"and"}}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[-864,48],"id":"1e1c22fd-99f7-4ab9-ac21-571f48db5682","name":"Route Signature Process"},{"parameters":{"assignments":{"assignments":[{"id":"645bd654-bfdb-4de2-bbf5-e63154ce7208","name":"base_name","value":"={{ String($json.id_process) + '_' + $json.solvo_id + '_' + $json.nombre_empleado.split(' ')[0].toUpperCase() }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-2960,368],"id":"dfca1cf8-9dd9-4d36-897d-612271f5a0fb","name":"Create Folder Name"}],"connections":{"Get Citation Document":{"main":[[{"node":"Save Document Locally","type":"main","index":0}]]},"Upload PDF To SharePoint":{"main":[[{"node":"Clean Temporary Files","type":"main","index":0}]]},"Convert PDF Base64":{"main":[[{"node":"Upload PDF To SharePoint","type":"main","index":0}]]},"Get Process Data":{"main":[[{"node":"Map SharePoint Data","type":"main","index":0}]]},"Save Document Locally":{"main":[[{"node":"Build Document Paths","type":"main","index":0}]]},"Build Document Paths":{"main":[[{"node":"Validate Signature Exists","type":"main","index":0}]]},"Validate Signature Exists":{"main":[[{"node":"Set Retry Variable","type":"main","index":0}]]},"Get Signature From SharePoint":{"main":[[{"node":"Save Signature Locally","type":"main","index":0}]]},"Save Signature Locally":{"main":[[{"node":"Validate Signature Exists","type":"main","index":0}]]},"Create Signature Script":{"main":[[{"node":"Execute Signature Insertion","type":"main","index":0}]]},"Execute Signature Insertion":{"main":[[{"node":"Extract Document Results","type":"main","index":0}]]},"Extract Document Results":{"main":[[{"node":"Verify PDF Generated","type":"main","index":0}]]},"Verify PDF Generated":{"main":[[{"node":"Convert PDF Base64","type":"main","index":0}]]},"Clean Temporary Files":{"main":[[{"node":"Delete Original Document","type":"main","index":0}]]},"Delete Original Document":{"main":[[{"node":"Set Final Document Name","type":"main","index":0}],[]]},"Add Retry Delay":{"main":[[{"node":"Get Signature From SharePoint","type":"main","index":0}]]},"Map SharePoint Data":{"main":[[{"node":"Create Folder Name","type":"main","index":0}]]},"Set Final Document Name":{"main":[[{"node":"Call LG_SEND_EMPLOYEE_CITATION_MAIL","type":"main","index":0}]]},"Call From LG_LAWYER_AGENT":{"main":[[{"node":"Get Process Data","type":"main","index":0}]]},"Set Retry Variable":{"main":[[{"node":"Route Signature Process","type":"main","index":0}]]},"Set Increment Retry Counter":{"main":[[{"node":"Add Retry Delay","type":"main","index":0}]]},"Set Max Retries Error":{"main":[[{"node":"Stop And Error","type":"main","index":0}]]},"Path Tmp Folder":{"main":[[{"node":"Create Evidence Folder","type":"main","index":0}]]},"Create Evidence Folder":{"main":[[{"node":"Create Evidence Folder1","type":"main","index":0}]]},"Create Evidence Folder1":{"main":[[{"node":"Get Citation Document","type":"main","index":0}]]},"Route Signature Process":{"main":[[{"node":"Create Signature Script","type":"main","index":0}],[{"node":"Set Increment Retry Counter","type":"main","index":0}],[{"node":"Set Max Retries Error","type":"main","index":0}]]},"Create Folder Name":{"main":[[{"node":"Path Tmp Folder","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"Call From LG_LAWYER_AGENT":[{"json":{"id":"198","created_at":"2025-08-19T17:46:05.990Z","is_authenticated":true,"user_id":"9","full_name":"Nicolas Hernandez","document":"1015440371","user_teams_id":"a:1OhNXBIKWtuLowJ3VrgkcLvamUWmToj4eBUFa_Pj7p0fFx6052h_zUEAzGzWVKzRD5ent1hoQtLaBR-Vtmx8vSdK0ewd4zpAx-z8po4kvWt9mmLYrTBnkLn9-Omr7Eke7","update_at":"2025-08-19T15:53:13.859Z","url_teams":"https://smba.trafficmanager.net/amer/f5b4bce5-06f0-4035-861f-ddea6d55a5e9/v3/conversations/a:1OhNXBIKWtuLowJ3VrgkcLvamUWmToj4eBUFa_Pj7p0fFx6052h_zUEAzGzWVKzRD5ent1hoQtLaBR-Vtmx8vSdK0ewd4zpAx-z8po4kvWt9mmLYrTBnkLn9-Omr7Eke7/activities","id_proceso":85}}]},"versionId":"57ba551c-8167-4ca0-a790-102238f27b4f","triggerCount":0,"tags":[{"createdAt":"2025-07-28T22:38:01.676Z","updatedAt":"2025-07-28T22:38:01.676Z","id":"iyx2moGIItxF1doQ","name":"Leidy"}]}